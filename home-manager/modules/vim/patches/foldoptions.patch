diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
index eb377697e9fb..38652346b522 100644
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -2650,6 +2650,12 @@ A jump table for the options with a short description can be found at |Q_op|.
 	To close folds you can re-apply 'foldlevel' with the |zx| command or
 	set the 'foldclose' option to "all".
 
+    						      *'foldoptions'* *'fop'*
+'foldoptions' 'fop'	string (default "")
+			local to window
+	List of words that change the behavor of the |foldcolumn|.
+          nodigits      Disable digits shown to indicate the nesting level.
+
 						*'foldtext'* *'fdt'*
 'foldtext' 'fdt'	string (default: "foldtext()")
 			local to window
diff --git a/runtime/doc/vim_diff.txt b/runtime/doc/vim_diff.txt
index 4b26e5501c92..2d7964739144 100644
--- a/runtime/doc/vim_diff.txt
+++ b/runtime/doc/vim_diff.txt
@@ -235,6 +235,7 @@ Options:
   'fillchars'   flags: "msgsep" (see 'display'), "horiz", "horizup",
                 "horizdown", "vertleft", "vertright", "verthoriz"
   'foldcolumn'  supports up to 9 dynamic/fixed columns
+  'foldoptions' fold column customization options
   'inccommand'  shows interactive results for |:substitute|-like commands
                 and |:command-preview| commands
   'laststatus'  global statusline support
diff --git a/src/nvim/buffer_defs.h b/src/nvim/buffer_defs.h
index 8c70765d30a3..7e60851503f3 100644
--- a/src/nvim/buffer_defs.h
+++ b/src/nvim/buffer_defs.h
@@ -195,6 +195,8 @@ typedef struct {
 #define w_p_fdt w_onebuf_opt.wo_fdt   // 'foldtext'
   char_u *wo_fmr;
 #define w_p_fmr w_onebuf_opt.wo_fmr    // 'foldmarker'
+  char_u *wo_fop;
+#define w_p_fop w_onebuf_opt.wo_fop    // 'foldoptions'
   int wo_lbr;
 #define w_p_lbr w_onebuf_opt.wo_lbr    // 'linebreak'
   int wo_list;
@@ -1424,6 +1426,7 @@ struct window_S {
   uint32_t w_p_wbr_flags;           // flags for 'winbar'
   uint32_t w_p_fde_flags;           // flags for 'foldexpr'
   uint32_t w_p_fdt_flags;           // flags for 'foldtext'
+  uint32_t w_p_fop_flags;           // flags for 'foldoptions'
   int *w_p_cc_cols;                 // array of columns to highlight or NULL
   uint8_t w_p_culopt_flags;         // flags for cursorline highlighting
   long w_p_siso;                    // 'sidescrolloff' local value
diff --git a/src/nvim/option.c b/src/nvim/option.c
index bcaa4bb9b8df..6725d51dbf44 100644
--- a/src/nvim/option.c
+++ b/src/nvim/option.c
@@ -2489,6 +2489,10 @@ static char *did_set_string_option(int opt_idx, char_u **varp, bool new_value_al
     if (opt_strings_flags(p_jop, p_jop_values, &jop_flags, true) != OK) {
       errmsg = e_invarg;
     }
+  } else if (varp == &curwin->w_p_fop) {  // 'foldoptions'
+    if (opt_strings_flags(curwin->w_p_fop, p_fop_values, &curwin->w_p_fop_flags, true) != OK) {
+      errmsg = e_invarg;
+    }
   } else if (gvarp == &p_nf) {  // 'nrformats'
     if (check_opt_strings(*varp, p_nf_values, true) != OK) {
       errmsg = e_invarg;
@@ -5594,6 +5598,8 @@ int makefoldset(FILE *fd)
       || put_setnum(fd, "setlocal", "fdl", &curwin->w_p_fdl) == FAIL
       || put_setnum(fd, "setlocal", "fml", &curwin->w_p_fml) == FAIL
       || put_setnum(fd, "setlocal", "fdn", &curwin->w_p_fdn) == FAIL
+      || put_setstring(fd, "setlocal", "fop", &curwin->w_p_fop, 0)
+      == FAIL
       || put_setbool(fd, "setlocal", "fen",
                      curwin->w_p_fen) == FAIL) {
     return FAIL;
@@ -6057,6 +6063,8 @@ static char_u *get_varp(vimoption_T *p)
     return (char_u *)&(curwin->w_p_fml);
   case PV_FDN:
     return (char_u *)&(curwin->w_p_fdn);
+  case PV_FOP:
+    return (char_u *)&(curwin->w_p_fop);
   case PV_FDE:
     return (char_u *)&(curwin->w_p_fde);
   case PV_FDT:
@@ -6310,6 +6318,7 @@ void copy_winopt(winopt_T *from, winopt_T *to)
   to->wo_fdn = from->wo_fdn;
   to->wo_fde = vim_strsave(from->wo_fde);
   to->wo_fdt = vim_strsave(from->wo_fdt);
+  to->wo_fop = vim_strsave(from->wo_fop);
   to->wo_fmr = vim_strsave(from->wo_fmr);
   to->wo_scl = vim_strsave(from->wo_scl);
   to->wo_winhl = vim_strsave(from->wo_winhl);
@@ -6340,6 +6349,7 @@ static void check_winopt(winopt_T *wop)
   check_string_option(&wop->wo_fde);
   check_string_option(&wop->wo_fdt);
   check_string_option(&wop->wo_fmr);
+  check_string_option(&wop->wo_fop);
   check_string_option(&wop->wo_scl);
   check_string_option(&wop->wo_rlc);
   check_string_option(&wop->wo_sbr);
@@ -6366,6 +6376,7 @@ void clear_winopt(winopt_T *wop)
   clear_string_option(&wop->wo_fde);
   clear_string_option(&wop->wo_fdt);
   clear_string_option(&wop->wo_fmr);
+  clear_string_option(&wop->wo_fop);
   clear_string_option(&wop->wo_scl);
   clear_string_option(&wop->wo_rlc);
   clear_string_option(&wop->wo_sbr);
diff --git a/src/nvim/option_defs.h b/src/nvim/option_defs.h
index 531527ea3c00..2157bf9f2f86 100644
--- a/src/nvim/option_defs.h
+++ b/src/nvim/option_defs.h
@@ -455,6 +455,10 @@ static char *(p_fdo_values[]) = { "all", "block", "hor", "mark", "percent",
 #define FDO_INSERT             0x100
 #define FDO_UNDO               0x200
 #define FDO_JUMP               0x400
+#ifdef IN_OPTION_C
+static char *(p_fop_values[]) = { "nodigits", NULL };
+#endif
+#define FOP_NODIGITS           0x01
 EXTERN char_u *p_fp;          // 'formatprg'
 EXTERN int p_fs;                // 'fsync'
 EXTERN int p_gd;                // 'gdefault'
@@ -865,6 +869,7 @@ enum {
   WV_FDM,
   WV_FML,
   WV_FDN,
+  WV_FOP,
   WV_FDE,
   WV_FDT,
   WV_FMR,
diff --git a/src/nvim/options.lua b/src/nvim/options.lua
index a0fbf8d9f072..a50c15ef91df 100644
--- a/src/nvim/options.lua
+++ b/src/nvim/options.lua
@@ -861,6 +861,14 @@ return {
       redraw={'current_window'},
       defaults={if_true="0"}
     },
+    {
+      full_name='foldoptions', abbreviation='fop',
+      short_desc=N_("fold column options"),
+      type='string', list='onecomma', scope={'window'},
+      deny_duplicates=true,
+      redraw={'current_window'},
+      defaults={if_true=''}
+    },
     {
       full_name='foldenable', abbreviation='fen',
       short_desc=N_("set to display all folds open"),
diff --git a/src/nvim/screen.c b/src/nvim/screen.c
index 32e2d515e10d..7dcf90ae7e6d 100644
--- a/src/nvim/screen.c
+++ b/src/nvim/screen.c
@@ -1922,6 +1922,7 @@ static size_t fill_foldcolumn(char_u *p, win_T *wp, foldinfo_T foldinfo, linenr_
   int symbol = 0;
   int len = 0;
   bool closed = foldinfo.fi_lines > 0;
+  bool no_digits = wp->w_p_fop_flags & FOP_NODIGITS;
   // Init to all spaces.
   memset(p, ' ', MAX_MCO * fdc + 1);
 
@@ -1938,7 +1939,7 @@ static size_t fill_foldcolumn(char_u *p, win_T *wp, foldinfo_T foldinfo, linenr_
     if (foldinfo.fi_lnum == lnum
         && first_level + i >= foldinfo.fi_low_level) {
       symbol = wp->w_p_fcs_chars.foldopen;
-    } else if (first_level == 1) {
+    } else if (first_level == 1 || (first_level >= 1 && no_digits)) {
       symbol = wp->w_p_fcs_chars.foldsep;
     } else if (first_level + i <= 9) {
       symbol = '0' + first_level + i;
diff --git a/test/functional/ui/fold_spec.lua b/test/functional/ui/fold_spec.lua
index 394f2f5f49f0..f73459038c10 100644
--- a/test/functional/ui/fold_spec.lua
+++ b/test/functional/ui/fold_spec.lua
@@ -1818,6 +1818,93 @@ describe("folded lines", function()
         ]])
       end
     end)
+
+    it('disables fold level digits #17446', function()
+      funcs.setline(1, 'function a() {')
+      funcs.setline(2, '	function b() {')
+      funcs.setline(3, '		function c() {')
+      funcs.setline(4, '			function d() {')
+      funcs.setline(5, '			}')
+      funcs.setline(6, '		}')
+      funcs.setline(7, '	}')
+      funcs.setline(8, '}')
+
+      command('set foldcolumn=auto foldlevel=999 foldmethod=indent')
+      if multigrid then
+        screen:expect([[
+          ## grid 1
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [3:---------------------------------------------]|
+          ## grid 2
+            {7: }^function a() {                              |
+            {7:-}        function b() {                      |
+            {7:-}                function c() {              |
+            {7:-}                        function d() {      |
+            {7:3}                        }                   |
+            {7:2}                }                           |
+            {7:│}        }                                   |
+
+          ## grid 3
+                                                         |
+        ]])
+      else
+        screen:expect([[
+          {7: }^function a() {                              |
+          {7:-}        function b() {                      |
+          {7:-}                function c() {              |
+          {7:-}                        function d() {      |
+          {7:3}                        }                   |
+          {7:2}                }                           |
+          {7:│}        }                                   |
+                                                       |
+        ]])
+      end
+
+      command('set foldoptions=nodigits')
+      if multigrid then
+        screen:expect([[
+          ## grid 1
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [2:---------------------------------------------]|
+            [3:---------------------------------------------]|
+          ## grid 2
+            {7: }^function a() {                              |
+            {7:-}        function b() {                      |
+            {7:-}                function c() {              |
+            {7:-}                        function d() {      |
+            {7:│}                        }                   |
+            {7:│}                }                           |
+            {7:│}        }                                   |
+
+          ## grid 3
+                                                         |
+        ]])
+      else
+        screen:expect([[
+          {7: }^function a() {                              |
+          {7:-}        function b() {                      |
+          {7:-}                function c() {              |
+          {7:-}                        function d() {      |
+          {7:│}                        }                   |
+          {7:│}                }                           |
+          {7:│}        }                                   |
+                                                       |
+        ]])
+      end
+
+      assert_alive()
+    end)
   end
 
   describe("with ext_multigrid", function()
